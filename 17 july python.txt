# Create a list of squares
"""
squares = [x**2 for x in range(10)]
print(squares)
"""




# Create a dictionary with keys and values squared
"""
squares_dict = {x: x**2 for x in range(10)}
print(squares_dict)
"""




# Lambda function to add 10 to a number
"""
add_ten = lambda x: x + 10
print(add_ten(50))
"""




# Using map to double the elements in a list
"""
numbers = [1, 2, 3, 4, 5, 6]
doubled = list(map(lambda x: x * 2, numbers))
print(doubled)




# Using filter to get even numbers
even_numbers = list(filter(lambda x: x % 2 == 0, numbers))
print(even_numbers)
"""




# Generator for Fibonacci sequence
"""
def fibonacci(n):
    a, b = 0, 1
    while a < n:
        yield a
        a, b = b, a + b

for num in fibonacci(53):
    print(num)
"""





# A simple decorator to print function call details
"""
def log_function_call(func):
    def wrapper(*args, **kwargs):
        print(f"Calling function {func.__name__} with arguments {args} and {kwargs}")
        return func(*args, **kwargs)
    return wrapper

@log_function_call
def greet(name):
    print(f"Hello, {name}")

greet("Alice")
"""




# List slicing examples
"""
numbers = list(range(10))
print(numbers[2:5])  # Output: [2, 3, 4]
print(numbers[:5])   # Output: [0, 1, 2, 3, 4]
print(numbers[5:])   # Output: [5, 6, 7, 8, 9]
print(numbers[::2])  # Output: [0, 2, 4, 6, 8]
"""




"""
try:
    result = 10 / 0
except ZeroDivisionError:
    print("You can't divide by zero!")
finally:
    print("This will always be executed")
"""




# Enumerate in a for loop
"""
fruits = ['apple', 'banana', 'cherry']
for index, fruit in enumerate(fruits):
    print(f"{fruit}: {index}")
"""




"""
dict1 = {'a': 1, 'b': 2}
dict2 = {'b': 3, 'c': 4}
dict0 = {'e': 5, 'd': 6}
merged_dict = dict1 | dict2| dict0
print(merged_dict)  # Output: {'a': 1, 'b': 3, 'c': 4}
"""
